package ec.edu.espe.condomanagementu2.view;

import ec.edu.espe.condomanagementu2.controller.InvoiceAreaDAO;
import ec.edu.espe.condomanagementu2.model.InvoiceArea;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gabriel Manosalvas
 */
public class FrmInvoice extends javax.swing.JFrame {
    private InvoiceAreaDAO invoiceAreaDAO;
    /**
     * Creates new form FrmInvoice
     */
    public FrmInvoice() {
        initComponents();
        cmbEstadoPago.addItem("Pagada");
        cmbEstadoPago.addItem("Pendiente");
        cmbEstadoPago.addItem("Vencida");

        loadInvoiceData();  // Cargar datos de facturas al iniciar
        invoiceAreaDAO = new InvoiceAreaDAO();
    }
    private void actualizarTablaPorEstadoPago(String estadoPago) {
    // Obtener todas las facturas de la base de datos
    List<InvoiceArea> facturas = invoiceAreaDAO.getAll();
    
    // Limpiar la tabla antes de actualizar
    DefaultTableModel model = (DefaultTableModel) tblFactura.getModel();
    model.setRowCount(0);

    // Filtrar las facturas por el estado de pago seleccionado
    for (InvoiceArea factura : facturas) {
        if (factura.getEstadoPago().equals(estadoPago) || estadoPago.equals("Todos")) {
            // Añadir las facturas que coincidan al modelo de la tabla
            model.addRow(new Object[]{
                factura.getNumeroFactura(),
                factura.getFechaEmision(),
                factura.getIdResidente(),
                factura.getArea(),
                factura.getFecha(),
                factura.getEstadoPago(),
                factura.getMetodoPago(),
                factura.getMontoTotal()
            });
        }
    }
}

      private void loadInvoiceData() {
        // Crear una instancia del DAO
        InvoiceAreaDAO invoiceAreaDAO = new InvoiceAreaDAO();
        
        // Obtener todas las facturas
        List<InvoiceArea> invoices = invoiceAreaDAO.getAll();
        
        // Crear el modelo para la tabla
        DefaultTableModel model = (DefaultTableModel) tblFactura.getModel();
        
        // Limpiar la tabla antes de llenarla
        model.setRowCount(0);
        
        // Recorrer las facturas y agregarlas a la tabla
        for (InvoiceArea invoice : invoices) {
            Object[] row = new Object[6]; // Asegúrate de tener el número adecuado de columnas
            row[0] = invoice.getNumeroFactura();
            row[1] = invoice.getFechaEmision();
            row[2] = invoice.getIdResidente();
            row[3] = invoice.getArea();
            row[4] = invoice.getMontoTotal();
            row[5] = invoice.getEstadoPago();
            
            model.addRow(row);  // Añadir la fila a la tabla
        }
        
    }
          // Método para agregar una nueva factura
    private void addInvoice() {
        String numeroFactura = txtNumeroFactura.getText();
        String fechaEmision = txtFechaEmision.getText();
        String idResidente = txtIDResidente.getText();
        String area = txtArea.getText();
        String montoTotal = txtMontoTotal.getText();
        String estadoPago = cmbEstadoPago.getSelectedItem().toString();  // Suponiendo que es un JComboBox

        if (numeroFactura.isEmpty() || fechaEmision.isEmpty() || idResidente.isEmpty() || area.isEmpty() || montoTotal.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.");
            return;
        }

        // Crear una nueva factura
        InvoiceArea newInvoice = new InvoiceArea(
            numeroFactura, 
            fechaEmision, 
            idResidente, 
            area, 
            "",  // Suponiendo que no tenemos la fecha aún
            estadoPago,
            "Efectivo",  // Suponiendo que el método de pago es "Efectivo" por defecto
            Double.parseDouble(montoTotal)  // Convertir monto a Double
        );

        // Insertar la factura en la base de datos
        InvoiceAreaDAO invoiceAreaDAO = new InvoiceAreaDAO();
        invoiceAreaDAO.insert(newInvoice);

        // Actualizar la tabla con los nuevos datos
        loadInvoiceData();

        // Limpiar los campos de texto
        txtNumeroFactura.setText("");
        txtFechaEmision.setText("");
        txtIDResidente.setText("");
        txtArea.setText("");
        txtMontoTotal.setText("");
    }
      

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNumeroFactura = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtFechaEmision = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtIDResidente = new javax.swing.JTextField();
        txtArea = new javax.swing.JTextField();
        txtFecha = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cmbEstadoPago = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        txtMetodoPago = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtMontoTotal = new javax.swing.JTextField();
        btnCrear = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnMarcarPagada = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFactura = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("Factura");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Número de Factura: ");

        txtNumeroFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroFacturaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Fecha de Emisión:");

        txtFechaEmision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaEmisionActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("ID Residente:");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel4.setText(" Detalles de la Reserva");

        jLabel6.setText("Área:");

        jLabel7.setText("Fecha:");

        txtIDResidente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDResidenteActionPerformed(evt);
            }
        });

        txtArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAreaActionPerformed(evt);
            }
        });

        txtFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaActionPerformed(evt);
            }
        });

        jLabel9.setText("Estado de Pago:");

        cmbEstadoPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pagada", "Pendiente", "Vencida" }));
        cmbEstadoPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEstadoPagoActionPerformed(evt);
            }
        });

        jLabel10.setText("Método de Pago:");

        txtMetodoPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMetodoPagoActionPerformed(evt);
            }
        });

        jLabel11.setText("Monto Total: ");

        txtMontoTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMontoTotalActionPerformed(evt);
            }
        });

        btnCrear.setText("Crear");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnMarcarPagada.setText("Marcar Pagada");
        btnMarcarPagada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarcarPagadaActionPerformed(evt);
            }
        });

        tblFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Número de Factura", "Fecha de Emisión", "Residente", "Área", "Monto Total", "Estado de Pago"
            }
        ));
        jScrollPane1.setViewportView(tblFactura);

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(73, 73, 73)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel2)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel11)
                                                .addGap(29, 29, 29)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(btnCrear)
                                                    .addComponent(txtArea, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                                    .addComponent(txtFecha)
                                                    .addComponent(txtMontoTotal))))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(152, 152, 152)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel9)
                                                            .addComponent(jLabel10)
                                                            .addComponent(btnEliminar))
                                                        .addGap(18, 18, 18)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(btnMarcarPagada)
                                                            .addComponent(cmbEstadoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(txtMetodoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(42, 42, 42)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(txtFechaEmision, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(txtNumeroFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(txtIDResidente, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGap(30, 30, 30))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addComponent(btnEditar))))
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(203, 203, 203)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(318, 318, 318)
                                .addComponent(btnRegresar)))
                        .addGap(0, 78, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNumeroFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtFechaEmision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtIDResidente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txtArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbEstadoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMetodoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel10)))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtMontoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCrear)
                        .addComponent(btnEditar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEliminar)
                        .addComponent(btnMarcarPagada)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(btnRegresar)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbEstadoPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEstadoPagoActionPerformed
// Obtener el estado seleccionado
    String estadoPago = (String) cmbEstadoPago.getSelectedItem();

    // Mostrar el estado seleccionado (puedes usarlo para otras operaciones, por ejemplo, filtrar la tabla)
    System.out.println("Estado seleccionado: " + estadoPago);

    // Verificar si el estadoPago no es null
    if (estadoPago != null) {
        // Llamar a la función para actualizar la tabla con el estado seleccionado
        actualizarTablaPorEstadoPago(estadoPago);
    } else {
        System.out.println("No se ha seleccionado un estado de pago");
        // Lógica para manejar el caso en que no se ha seleccionado un estado
        // Por ejemplo, podrías mostrar un mensaje o realizar alguna otra acción
    }

    }//GEN-LAST:event_cmbEstadoPagoActionPerformed

    private void txtNumeroFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroFacturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroFacturaActionPerformed

    private void txtFechaEmisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaEmisionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaEmisionActionPerformed

    private void txtIDResidenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDResidenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDResidenteActionPerformed

    private void txtFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaActionPerformed

    private void txtAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAreaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAreaActionPerformed

    private void txtMetodoPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMetodoPagoActionPerformed
    // Limpiar el JTextField de metodoPago
    txtMetodoPago.setText("");  // Esto dejará el campo vacío

    }//GEN-LAST:event_txtMetodoPagoActionPerformed

    private void txtMontoTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMontoTotalActionPerformed
    // Limpiar el campo de texto 'montoTotal'
    txtMontoTotal.setText("");
    }//GEN-LAST:event_txtMontoTotalActionPerformed

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        // TODO add your handling code here:
        // Obtener los datos desde los JTextField
    String numeroFactura = txtNumeroFactura.getText();
    String fechaEmision = txtFechaEmision.getText();
    String idResidente = txtIDResidente.getText();
    String area = txtArea.getText();
    String fecha = txtFecha.getText();
    String estadoPago = cmbEstadoPago.getSelectedItem().toString();
    String metodoPago = txtMetodoPago.getText();
    Double montoTotal = Double.parseDouble(txtMontoTotal.getText());

    // Crear una nueva factura
    InvoiceArea facturaArea = new InvoiceArea(numeroFactura, fechaEmision, idResidente, area, fecha, estadoPago, metodoPago, montoTotal);
    
    // Insertar en la base de datos (opcional)
    invoiceAreaDAO.insert(facturaArea);

    // Agregar los datos a la tabla
    DefaultTableModel model = (DefaultTableModel) tblFactura.getModel();
    model.addRow(new Object[]{
        numeroFactura, fechaEmision, idResidente, area, fecha, estadoPago, metodoPago, montoTotal
    });

    // Limpiar los campos después de agregar la factura
    txtNumeroFactura.setText("");
    txtFechaEmision.setText("");
    txtIDResidente.setText("");
    txtArea.setText("");
    txtFecha.setText("");
    cmbEstadoPago.setSelectedIndex(-1);  // Deja el ComboBox sin selección
    txtMetodoPago.setText("");
    txtMontoTotal.setText("");
    }//GEN-LAST:event_btnCrearActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
// Obtener el número de factura desde el campo de texto
    String numeroFactura = txtNumeroFactura.getText();
    
    // Consultar la base de datos para obtener la factura
    InvoiceArea facturaArea = invoiceAreaDAO.getByNumeroFactura(numeroFactura);

    // Verificar si la factura existe
    if (facturaArea != null) {
        // Obtener los valores desde los JTextField y JComboBox
        String fechaEmision = txtFechaEmision.getText();
        String idResidente = txtIDResidente.getText();
        String area = txtArea.getText();
        String fecha = txtFecha.getText();
        String estadoPago = cmbEstadoPago.getSelectedItem().toString();
        String metodoPago = txtMetodoPago.getText();
        Double montoTotal = Double.parseDouble(txtMontoTotal.getText());

        // Actualizar la factura con los nuevos datos
        facturaArea.setFechaEmision(fechaEmision);
        facturaArea.setIdResidente(idResidente);
        facturaArea.setArea(area);
        facturaArea.setFecha(fecha);
        facturaArea.setEstadoPago(estadoPago);
        facturaArea.setMetodoPago(metodoPago);
        facturaArea.setMontoTotal(montoTotal);

        // Llamar al método de actualización del DAO
        invoiceAreaDAO.update(facturaArea);

        // Actualizar la tabla
        DefaultTableModel model = (DefaultTableModel) tblFactura.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).equals(numeroFactura)) {
                model.setValueAt(fechaEmision, i, 1);
                model.setValueAt(idResidente, i, 2);
                model.setValueAt(area, i, 3);
                model.setValueAt(fecha, i, 4);
                model.setValueAt(estadoPago, i, 5);
                model.setValueAt(metodoPago, i, 6);
                model.setValueAt(montoTotal, i, 7);
                break;
            }
        }

        // Limpiar los campos después de editar la factura
        txtNumeroFactura.setText("");
        txtFechaEmision.setText("");
        txtIDResidente.setText("");
        txtArea.setText("");
        txtFecha.setText("");
        txtMetodoPago.setText("");
        txtMontoTotal.setText("");
        cmbEstadoPago.setSelectedIndex(-1);  // Limpiar el ComboBox
    } else {
        // Mostrar un mensaje si la factura no existe
        JOptionPane.showMessageDialog(this, "Factura no encontrada", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnMarcarPagadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarcarPagadaActionPerformed
    // Obtener el número de factura desde el campo de texto
    String numeroFactura = txtNumeroFactura.getText();
    
    // Consultar la base de datos para obtener la factura
    InvoiceArea facturaArea = invoiceAreaDAO.getByNumeroFactura(numeroFactura);

    // Verificar si la factura existe
    if (facturaArea != null) {
        // Cambiar el estado de pago a "Pagada"
        facturaArea.setEstadoPago("Pagada");

        // Llamar al método de actualización del DAO
        invoiceAreaDAO.update(facturaArea);

        // Actualizar la tabla
        DefaultTableModel model = (DefaultTableModel) tblFactura.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).equals(numeroFactura)) {
                model.setValueAt("Pagada", i, 5);  // Columna de estado de pago
                break;
            }
        }

        // Limpiar el campo de número de factura
        txtNumeroFactura.setText("");
        
        // Mostrar mensaje de éxito
        JOptionPane.showMessageDialog(this, "Factura marcada como pagada", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    } else {
        // Mostrar un mensaje si la factura no existe
        JOptionPane.showMessageDialog(this, "Factura no encontrada", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnMarcarPagadaActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
// Obtener la fila seleccionada en la tabla
    int filaSeleccionada = tblFactura.getSelectedRow();  // tblFacturas es el nombre de tu JTable
    
    if (filaSeleccionada != -1) {  // Verificar si hay una fila seleccionada
        // Obtener el número de factura de la fila seleccionada
        String numeroFactura = (String) tblFactura.getValueAt(filaSeleccionada, 0);  // Asumiendo que la columna 0 es el número de factura
        
        // Confirmar eliminación con el usuario
        int confirmacion = JOptionPane.showConfirmDialog(null, "¿Está seguro de que desea eliminar esta factura?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        
        if (confirmacion == JOptionPane.YES_OPTION) {
            // Eliminar la factura de la base de datos usando el DAO
            InvoiceAreaDAO invoiceAreaDAO = new InvoiceAreaDAO();
            invoiceAreaDAO.delete(numeroFactura);
            
            // Eliminar la fila de la tabla
            DefaultTableModel modelo = (DefaultTableModel) tblFactura.getModel();
            modelo.removeRow(filaSeleccionada);
            
            System.out.println("Factura eliminada: " + numeroFactura);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione una factura para eliminar.");
    }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
            FrmMain frmMain = new FrmMain();
            frmMain.setVisible(true);

            // Cerrar la pantalla actual
            this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmInvoice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnMarcarPagada;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JComboBox<String> cmbEstadoPago;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblFactura;
    private javax.swing.JTextField txtArea;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtFechaEmision;
    private javax.swing.JTextField txtIDResidente;
    private javax.swing.JTextField txtMetodoPago;
    private javax.swing.JTextField txtMontoTotal;
    private javax.swing.JTextField txtNumeroFactura;
    // End of variables declaration//GEN-END:variables
}
