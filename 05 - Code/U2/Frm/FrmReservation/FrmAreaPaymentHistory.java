package ec.edu.espe.condomanagementu2.view;
import ec.edu.espe.condomanagementu2.controller.AreaPaymentHistoryDAO;
import ec.edu.espe.condomanagementu2.controller.ResidentDAO;
import ec.edu.espe.condomanagementu2.model.AreaPaymentHistory;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.JOptionPane;
import org.bson.Document;

/**
 *
 * @author Gabriel Manosalvas
 */
public class FrmAreaPaymentHistory extends javax.swing.JFrame {

private AreaPaymentHistoryDAO paymentHistoryDAO = new AreaPaymentHistoryDAO();
    /**
     * Creates new form FrmAreaPaymentHistory
     */
    public FrmAreaPaymentHistory() {
        initComponents();
          loadPaymentHistory();  // Cargar el historial de pagos al iniciar el formulario
    }
private void loadPaymentHistory() {
    String paymentStatus = (String) jComboBox1.getSelectedItem();
    String residentId = txtIDResidente.getText().trim();

    // Obtener los pagos filtrados desde el DAO
    List<AreaPaymentHistory> paymentHistories = paymentHistoryDAO.getPaymentHistory(paymentStatus, residentId);

    // Crear el modelo de la tabla
    DefaultTableModel model = (DefaultTableModel) tblHistorialPagos.getModel();
    model.setRowCount(0);  // Limpiar la tabla antes de agregar nuevas filas

    // Agregar los pagos a la tabla
    for (AreaPaymentHistory payment : paymentHistories) {
        // Obtener el nombre del residente directamente desde AreaPaymentHistory
        // El ID de residente es parte del payment, no necesitas otro DAO aquí.
        String residentName = payment.getResidentId();  // Si lo necesitas, puedes agregar un método para obtener el nombre del residente
        
        // Usar la información del payment directamente
        model.addRow(new Object[]{
            payment.getId(),
            residentName,  // Aquí puedes tener una referencia al nombre, si lo deseas
            payment.getAmount(),
            payment.getStatus()  // Mostrar el estado del pago
        });
    }
}




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtIDResidente = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHistorialPagos = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Historial de Pagos");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Pagado", "Pendiente" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Estado de Pago");

        jLabel3.setText("ID Residente");

        txtIDResidente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDResidenteActionPerformed(evt);
            }
        });

        tblHistorialPagos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID de Pago", "Residente", "Monto", "Estado del Pago"
            }
        ));
        jScrollPane1.setViewportView(tblHistorialPagos);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(128, 128, 128))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIDResidente)
                            .addComponent(jComboBox1, 0, 114, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(btnBuscar)
                        .addGap(126, 126, 126)
                        .addComponent(btnCerrar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtIDResidente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(btnCerrar))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        // Obtener la opción seleccionada del ComboBox
    String selectedStatus = (String) jComboBox1.getSelectedItem();
    
    // Obtener el ID del residente (si lo necesitas como filtro)
    String residentId = txtIDResidente.getText().trim();
    
    // Obtener el historial de pagos filtrado usando el DAO
    List<AreaPaymentHistory> paymentHistories = paymentHistoryDAO.getPaymentHistory(selectedStatus, residentId);

    // Crear el modelo de la tabla
    DefaultTableModel model = (DefaultTableModel) tblHistorialPagos.getModel();
    model.setRowCount(0);  // Limpiar la tabla antes de agregar nuevas filas

    // Agregar los pagos a la tabla
    for (AreaPaymentHistory payment : paymentHistories) {
        String residentName = payment.getResidentId();  // Aquí puedes agregar lógica para obtener el nombre del residente si lo necesitas
        
        model.addRow(new Object[]{
            payment.getId(),        // ID del pago
            residentName,           // Nombre del residente
            payment.getAmount(),    // Monto del pago
            payment.getStatus()     // Estado del pago (Pagado/Pendiente)
        });
    }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void txtIDResidenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDResidenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDResidenteActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
  // Obtener los datos de los campos
    String paymentStatus = (String) jComboBox1.getSelectedItem();
    String residentId = txtIDResidente.getText().trim();

    // Verificar si el ID del residente está vacío
    if (residentId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese el ID del residente.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtener el historial de pagos basado en los filtros
    List<AreaPaymentHistory> paymentHistories = paymentHistoryDAO.getPaymentHistory(paymentStatus, residentId);

    // Validar si no hay resultados
    if (paymentHistories.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No se encontraron pagos para el residente con ID: " + residentId, "No se encontró", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    // Si se encuentran pagos, cargar los resultados en la tabla
    DefaultTableModel model = (DefaultTableModel) tblHistorialPagos.getModel();
    model.setRowCount(0);  // Limpiar la tabla antes de agregar nuevas filas

    // Agregar los pagos a la tabla
    for (AreaPaymentHistory payment : paymentHistories) {
        // Obtener el nombre del residente directamente desde MongoDB
        ResidentDAO residentDAO = new ResidentDAO();
        Document residentDoc = residentDAO.readResident(payment.getResidentId()); // Obtener el Document desde MongoDB

        // Extraer el nombre del residente del Document
        String residentName = residentDoc != null ? residentDoc.getString("name") : "Desconocido"; // Si no lo encuentra, mostrar "Desconocido"

        model.addRow(new Object[]{
            payment.getId(),
            residentName,  // Nombre del residente obtenido del Document
            payment.getAmount(),
            payment.getStatus()
        });
    }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
    this.dispose();  // Esto cerrará la ventana de la pantalla
    }//GEN-LAST:event_btnCerrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmAreaPaymentHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmAreaPaymentHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmAreaPaymentHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAreaPaymentHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmAreaPaymentHistory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblHistorialPagos;
    private javax.swing.JTextField txtIDResidente;
    // End of variables declaration//GEN-END:variables
}
