package ec.edu.espe.condomanagementu2.view;

import ec.edu.espe.condomanagementu2.controller.AreaReservationManagerDAO;
import ec.edu.espe.condomanagementu2.controller.ResidentDAO;
import ec.edu.espe.condomanagementu2.model.AreaReservation;
import ec.edu.espe.condomanagementu2.model.Resident;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
/**
 *
 * @author Gabriel Manosalvas
 */
public class FrmAreaReservationManager extends javax.swing.JFrame {

    /**
     * Creates new form FrmAreaReservationManager
     */
    public FrmAreaReservationManager() {
        initComponents();
        initTableModel();
        updateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblReservations = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnCrear = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblReservations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Área", "Fecha", "Estado"
            }
        ));
        jScrollPane1.setViewportView(tblReservations);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Gestion de Reservas");

        btnCrear.setText("Crear Reserva");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar Reserva");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar Reserva");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCrear)
                        .addGap(27, 27, 27)
                        .addComponent(btnEditar)
                        .addGap(27, 27, 27)
                        .addComponent(btnCancelar)
                        .addContainerGap())
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(75, 75, 75))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(46, 46, 46)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrear)
                    .addComponent(btnEditar)
                    .addComponent(btnCancelar))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
     try {
        // Simulamos los valores de entrada (en lugar de tomarlos de los campos de texto de la GUI)
        String area = "Area 101";  // Simulación de área
        Date reservationDate = new Date();  // Fecha actual como simulación
        String status = "Active";  // Estado inicial de la reserva

        // Simulamos el ID de residente (en lugar de tomarlo de la GUI)
        String residentId = "R123";  // ID de residente simulado

        // Usamos el DAO para obtener el residente, sin necesidad de usar GUI
        ResidentDAO residentDAO = new ResidentDAO();
        Document residentDoc = residentDAO.readResident(residentId); // Obtener el documento del residente desde MongoDB

        if (residentDoc != null) {
            // Crear el objeto Resident a partir del documento
            Resident resident = new Resident(
                    residentDoc.getString("id"),
                    residentDoc.getString("name"),
                    residentDoc.getString("lastName"),
                    residentDoc.getString("phone")
            );
            
            // Crear el objeto AreaReservation usando el residente
            AreaReservation areaReservation = new AreaReservation(
                    resident,  // Asignar el residente a la reserva
                    area,
                    reservationDate,
                    status
            );

            // Usar el DAO para crear la reserva
            AreaReservationManagerDAO managerDAO = new AreaReservationManagerDAO();
            managerDAO.createReservation(areaReservation);

            // Informar al usuario
            JOptionPane.showMessageDialog(this, "Reserva creada exitosamente");
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró al residente con el ID proporcionado.");
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al crear la reserva: " + e.getMessage());
    }
    }//GEN-LAST:event_btnCrearActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = tblReservations.getSelectedRow();
        if (selectedRow != -1) {
            String area = (String) tblReservations.getValueAt(selectedRow, 0);
            String date = (String) tblReservations.getValueAt(selectedRow, 1);
            String status = (String) tblReservations.getValueAt(selectedRow, 2);

            if (area != null && date != null && status != null) {
                // Aquí actualizamos los datos de la reserva
                AreaReservation areaReservation = new AreaReservation(); // Debes incluir el ID y residente si es necesario
                AreaReservationManagerDAO managerDAO = new AreaReservationManagerDAO();
                managerDAO.updateReservation(areaReservation);  // Llamada al método update
                
                JOptionPane.showMessageDialog(this, "Reserva actualizada exitosamente");
                updateTable();  // Actualiza la tabla de reservas para reflejar los cambios
            } else {
                JOptionPane.showMessageDialog(this, "Error: Datos inválidos seleccionados.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una reserva para editar.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al actualizar la reserva: " + e.getMessage());
    }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
 int selectedRow = tblReservations.getSelectedRow();
    if (selectedRow != -1) {
        String area = (String) tblReservations.getValueAt(selectedRow, 0);
        String dateStr = (String) tblReservations.getValueAt(selectedRow, 1);

        // Convertir la fecha a un formato Date
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  // Ajusta el formato según tu necesidad
        Date date = null;
        try {
            date = dateFormat.parse(dateStr);  // Convierte el String a Date
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Error al convertir la fecha: " + e.getMessage());
            return;
        }

        if (area != null && date != null) {
            int confirm = JOptionPane.showConfirmDialog(this,
                "¿Estás seguro de que deseas cancelar la reserva para " + area + " en la fecha " + dateStr + "?",
                "Confirmar cancelación", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    AreaReservationManagerDAO reservationManagerDAO = new AreaReservationManagerDAO();
                    reservationManagerDAO.cancelReservation(area, date);  // Llamamos al método para cancelar

                    // Actualizar la tabla de reservas
                    updateTable();  // Refrescamos la tabla después de la cancelación
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error al cancelar la reserva: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error: Datos inválidos seleccionados.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecciona una reserva para cancelar.");
    }
    }//GEN-LAST:event_btnCancelarActionPerformed
    private void updateTable() {
        try {
            AreaReservationManagerDAO managerDAO = new AreaReservationManagerDAO();
            List<AreaReservation> reservations = managerDAO.getAllReservations();

            DefaultTableModel model = (DefaultTableModel) tblReservations.getModel();
            model.setRowCount(0);

            for (AreaReservation reservation : reservations) {
                model.addRow(new Object[]{reservation.getArea(), reservation.getReservationDate(), reservation.getStatus()});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar las reservas: " + e.getMessage());
        }
    }

    private void initTableModel() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Área");
        model.addColumn("Fecha");
        model.addColumn("Estado");

        tblReservations.setModel(model);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmAreaReservationManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmAreaReservationManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmAreaReservationManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAreaReservationManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmAreaReservationManager().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEditar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblReservations;
    // End of variables declaration//GEN-END:variables
}
